@typeparam T

<div class="e e-dropdown">
    <Button ButtonStyle="(_allSelected ? Button.Style.Default : Button.Style.Dark)">
        <div class="e label">
            <div class="e text">
                @Label
            </div>
            <div class="e e-control">
                @if (_allSelected)
                {
                    <div class="e square">All</div>
                }
                else
                {
                    <div class="e square">@_numberSelected</div>
                }
            </div>
            <i class="fa fa-caret-down"></i>
        </div>
    </Button>
    <div class="e content-wrapper">
        <div class="e content">
            <div class="e e-dropdown-item reset" @onclick="OnReset">
                <div class="e checkbox"><i class="fa fa-ban"></i></div>
                <div class="e text">Clear Selection</div>
            </div>
            @foreach (var item in DropdownItems)
            {
                <div class="e e-dropdown-item" @onclick="() => OnItemClick(item, _selectedItems.Contains(item))">
                    @Renderer(item, _selectedItems.Contains(item))
                </div>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public Action<IEnumerable<T>> OnChange { get; set; }
    [Parameter]
    public Func<T, string> Accessor { get; set; }
    [Parameter]
    public List<T> DropdownItems { get; set; }
    [Parameter]
    public Func<T, bool, RenderFragment> Renderer { get; set; }

    private HashSet<T> _selectedItems = new HashSet<T>();

    private string _buttonClass => $"e button {(_allSelected ? "" : "dark")}";
    private int _numberSelected => _selectedItems.Count;
    private bool _allSelected => _numberSelected == DropdownItems.Count() || _numberSelected == 0;

    protected override void OnInitialized()
    {
        if(Renderer is null)
        {
            Renderer = new Func<T, bool, RenderFragment>((item, selected) =>
            {
                return @<DefaultDropdownItem
                            IsSelected="selected" 
                            Label="@GetLabel(item)">
                        </DefaultDropdownItem>;
            });
        }
    }

    private string GetLabel(T item)
    {
        if(Accessor is null)
        {
            return item.ToString();
        }
        else
        {
            return Accessor(item);
        }
    }

    private void OnReset()
    {
        _selectedItems = new HashSet<T>();
        NotifyStateChanged();
    }

    private void OnItemClick(T item, bool isSelected)
    {
        if (!isSelected)
        {
            _selectedItems.Add(item);
        }
        else
        {
            _selectedItems.Remove(item);
        }
        NotifyStateChanged();
    }

    private void NotifyStateChanged()
    {
        StateHasChanged();
        OnChange?.Invoke(_selectedItems);
    }
}
