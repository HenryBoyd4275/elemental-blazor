@*
    Copyright (c) 2020 Apption Corporation
    
    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
*@

@typeparam T

<div class="@_dropdownClass" @onclick="ToggleVisible">
    <Button ButtonStyle="(_allSelected ? Button.Style.Light : Button.Style.Dark)">
        <div class="e label">
            <div class="e text">
                @if (Multiselect || _selectedItems.Count == 0)
                {
                    @Label
                }
                else
                {
                    <div class="single-render">
                        @Renderer(_selectedItems.FirstOrDefault(), false)
                    </div>
                }
            </div>
            <div class="e e-control">
                @if (Multiselect)
                {
                    if (_allSelected)
                    {
                        <div class="e square">All</div>
                    }
                    else
                    {
                        <div class="e square">@_numberSelected</div>
                    }
                }
            </div>
            <i class="fa fa-caret-down"></i>
        </div>
    </Button>
    <div class="e content-wrapper">
        <div class="e content">
            <div class="e e-dropdown-item reset" @onclick="OnReset">
                <div class="e checkbox"><i class="fa fa-ban"></i></div>
                <div class="e text">Clear Selection</div>
            </div>
            @foreach (var item in DropdownItems)
            {
                <div class="e e-dropdown-item" @onclick="() => OnItemClick(item, _selectedItems.Contains(item))">
                    @Renderer(item, _selectedItems.Contains(item))
                </div>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public bool Multiselect { get; set; } = false;
    [Parameter]
    public Action<IEnumerable<T>> OnChange { get; set; }
    [Parameter]
    public Func<T, string> Accessor { get; set; }
    [Parameter]
    public List<T> DropdownItems { get; set; }
    [Parameter]
    public Func<T, bool, RenderFragment> Renderer { get; set; }
    [Parameter]
    public IEnumerable<T> InitialValues { get; set; }

    private HashSet<T> _selectedItems;


    private bool _visible = false;
    private string _dropdownClass => $"e e-dropdown {(Multiselect ? "multi" : "single")} {(_visible && !Multiselect ? "visible" : "")}";
    private int _numberSelected => _selectedItems.Count;
    private bool _allSelected => _numberSelected == DropdownItems.Count() || _numberSelected == 0;

    protected override void OnInitialized()
    {
        if(Renderer is null)
        {
            Renderer = new Func<T, bool, RenderFragment>((item, selected) =>
            {
                return @<DefaultDropdownItem
                            IsSelected="selected" 
                            Label="@GetLabel(item)">
                        </DefaultDropdownItem>;
            });
        }

        _selectedItems = InitialValues?.ToHashSet() ?? new HashSet<T>();
    }

    private void ToggleVisible()
    {
        _visible = !_visible;
    }

    private string GetLabel(T item)
    {
        if(Accessor is null)
        {
            return item.ToString();
        }
        else
        {
            return Accessor(item);
        }
    }

    private void OnReset()
    {
        _selectedItems = new HashSet<T>();
        NotifyStateChanged();
    }

    private void OnItemClick(T item, bool isSelected)
    {
        if (isSelected)
        {
            _selectedItems.Remove(item);
        }
        else
        {
            if (Multiselect)
            {
                _selectedItems.Add(item);
            }
            else
            {
                _selectedItems = new HashSet<T>() { item };
            }
        }
        NotifyStateChanged();
    }

    private void NotifyStateChanged()
    {
        StateHasChanged();
        OnChange?.Invoke(_selectedItems);
    }
}
